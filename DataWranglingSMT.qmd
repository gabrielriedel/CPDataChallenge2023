---
title: "Data Wrangling SMT"
format:
  html:
    theme: default
---

```{r Setup}
library(tidyverse)
library(sportyR)
```



Importing the Data
```{r}
setwd("/Users/williamkapner/Documents/CPDataChallenge2023/game_info")
gameinfo1 = read_csv("game_info-1900_01_TeamKJ_TeamB.csv")
setwd("/Users/williamkapner/Documents/CPDataChallenge2023/ball_pos")
location1 = read_csv("ball_pos-1900_01_TeamKJ_TeamB.csv")
location2 = read_csv("ball_pos-1900_02_TeamKJ_TeamB.csv")
setwd("/Users/williamkapner/Documents/CPDataChallenge2023/game_events")
gameevents1 = read_csv("game_events-1900_01_TeamKJ_TeamB.csv")
gameevents2 = read_csv("game_events-1900_02_TeamKJ_TeamB.csv")
setwd("/Users/williamkapner/Documents/CPDataChallenge2023/player_pos_TeamA1")
playerpos1 = read_csv("player_pos-1902_17_TeamMB_TeamA1.csv")
```


```{r}
ballinplay = gameevents1|>
  filter(event_code==4)

a = location1|>
  group_by(play_id)|>
  summarise(timestamp = max(timestamp))


joinedmaxtime = left_join(a, location1, by = "timestamp")

ballpositionfiltered = joinedmaxtime|>
  filter(ball_position_y<=50,ball_position_y>=5)

semi_join(ballinplay,ballpositionfiltered, by = join_by("play_id"=="play_id.x"))


```


Function for reading all files
```{r}
con <- dbConnect(RSQLite::SQLite(), "/Users/williamkapner/Documents/CPDataChallenge2023/data_challenge.db")


# SQL query used to clean bunt data
data_clean_query <- "
SELECT DISTINCT 
    g1.game_str, g1.id, g1.play_id, g1.at_bat, g1.play_per_game, 
    g1.timestamp, g1.player_position, g1.event_code, 
    b.ball_position_x, b.ball_position_y, b.ball_position_z
FROM game_events g1
JOIN game_events g2 
    ON g1.game_str = g2.game_str
    AND g1.id = CAST(CAST(g2.id AS INTEGER) + 1 AS TEXT)
JOIN ball_pos b
    ON g1.game_str = b.game_str
    AND g1.timestamp = b.timestamp
WHERE g1.event_code = 2
AND g2.event_code = 16
AND b.ball_position_y > 5 AND b.ball_position_y < 50
ORDER BY g1.game_str, g1.id;
"

bunt_table <- dbGetQuery(con, data_clean_query)

dbDisconnect(con)

View(bunt_table)
```


Code to determine if a runner has scored
```{r}
runnerscore = function(){
  
}
ncol(gameinfo1)
print(gameinfo1[,18:21])


which(gameinfo1$batter == 7225, arr.ind = TRUE)
rower = which(gameinfo1[,18:21] == 7225, arr.ind = TRUE)


view(gameinfo1)
for (rownum in 1:10){
  nextrownum <- rownum + 1
  if (nextrownum <= 10) {
      column_index <- matching_rows[matching_rows[, 1] == rownum, 2]
      
      if (df[next_row_index, column_index] == target) {
        cat("Target number found in the same column in the next row.\n")
      } else {
        cat("Target number not found in the same column in the next row.\n")
      }
    } else {
      cat("No next row to compare.\n")
    }
  else {
  cat("Target number not found in the data frame.\n")
    }
  }

```












Work in progress - Mapping play ids onto a baseball field
need to change the scale
```{r}
playid2 = location1|>
  filter(play_id==2)


geom_baseball(league = "MLB")+
  geom_point(data = playid2, aes(x=ball_position_x,y=ball_position_y))

```


## Testing Ideas
First Basemen ranging for ground balls toward second base
first filter to where there's nobody on base
then find ground balls to right side
see when it turns out as a baserunner or an out
who fielded it?
```{r}
gameinfo1|>
  filter(first_baserunner==0, second_baserunner==0, third_baserunner == 0)

plays = data.frame(game_str = character(0))    
```

